/Users/fabioms/Desktop/PODTEST/PODTESTTests/CircleTimerViewTests.swift:
    1|       |//
    2|       |//  CircleTimerViewTests.swift
    3|       |//  PODTESTTests
    4|       |//
    5|       |//  Created by Fábio Maciel de Sousa on 17/07/20.
    6|       |//  Copyright © 2020 Fábio Maciel de Sousa. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import PODTEST
   11|       |
   12|       |class CircleTimerViewTests: XCTestCase {
   13|       |    
   14|       |    var sut: CircleTimerView!
   15|       |
   16|     15|    override func setUp() {
   17|     15|        // Put setup code here. This method is called before the invocation of each test method in the class.
   18|     15|        super.setUp()
   19|     15|        sut = CircleTimerView()
   20|     15|    }
   21|       |
   22|     15|    override func tearDown() {
   23|     15|        // Put teardown code here. This method is called after the invocation of each test method in the class.
   24|     15|        super.tearDown()
   25|     15|        sut = nil
   26|     15|    }
   27|       |
   28|       |    //MARK: - Methods
   29|      1|    func testExample() throws {
   30|      1|        // This is an example of a functional test case.
   31|      1|        // Use XCTAssert and related functions to verify your tests produce the correct results.
   32|      1|    }
   33|       |
   34|      1|    func testPerformanceExample() throws {
   35|      1|        // This is an example of a performance test case.
   36|     10|        self.measure {
   37|     10|            // Put the code you want to measure the time of here.
   38|     10|        }
   39|      1|    }
   40|       |    
   41|      1|    func testAnimateRing_WhenTimerStarts_StartAnimation(){
   42|      1|        //if no animation is happening
   43|      1|        sut.isRunning = false
   44|      1|        sut.animateRing(FromStroke: 0, FromAngle: 0, To: 1)
   45|      1|        XCTAssert(sut.isRunning)
   46|      1|        XCTAssertNotEqual(sut.ringLayer.animation(forKey: "animateRing"), nil)
   47|      1|        XCTAssertNotEqual(sut.pinLayer.animation(forKey: "animatePin"), nil)
   48|      1|        
   49|      1|        //if there is already an animation
   50|      1|        sut.ringLayer.removeAllAnimations()
   51|      1|        sut.pinLayer.removeAllAnimations()
   52|      1|        sut.isRunning = true
   53|      1|        sut.animateRing(FromStroke: 0, FromAngle: 0, To: 1)
   54|      1|        XCTAssertEqual(sut.ringLayer.animation(forKey: "animateRing"), nil)
   55|      1|        XCTAssertEqual(sut.pinLayer.animation(forKey: "animatePin"), nil)
   56|      1|    }
   57|       |    
   58|      1|    func testLayoutSubViews_WhenCalled_DelegateMustBeValid(){
   59|      1|        sut.setTimerValue(10)
   60|      1|        sut.layoutSubviews()
   61|      1|        XCTAssertNotNil(sut.timeTracker.timerFormatDelegate)
   62|      1|        sut.timeTracker.timerFormatDelegate = nil
   63|      1|        sut.timerLabel.text = nil
   64|      1|        sut.layoutSubviews()
   65|      1|        XCTAssertNil(sut.timerLabel.text)
   66|      1|    }
   67|       |    
   68|      1|    func testRemoveAnimation_WhenAnimationHasStopped_Reset(){
   69|      1|        sut.removeAnimation()
   70|      1|        sut.animateRing(FromStroke: 0, FromAngle: 0, To: 1)
   71|      1|        sut.removeAnimation()
   72|      1|        XCTAssertFalse(sut.isRunning)
   73|      1|        XCTAssertEqual(sut.ringLayer.animation(forKey: "animateRing"), nil)
   74|      1|        XCTAssertEqual(sut.pinLayer.animation(forKey: "animatePin"), nil)
   75|      1|    }
   76|       |
   77|      1|    func testSetTimerValue_WhenValueProvided_SetTimer(){
   78|      1|        //Check if values changed
   79|      1|        sut.timeTracker.configTime = 0
   80|      1|        sut.timeTracker.defaultTime = 0
   81|      1|        sut.setTimerValue(10)
   82|      1|        XCTAssertEqual(sut.timeTracker.configTime, 10)
   83|      1|        XCTAssertEqual(sut.timeTracker.defaultTime, 10)
   84|      1|        //Check if its format is second
   85|      1|        XCTAssertNotNil(sut.timeTracker.timerFormatDelegate as? Second)
   86|      1|        //Check if the format is minutes
   87|      1|        sut.setTimerValue(60)
   88|      1|        XCTAssertNotNil(sut.timeTracker.timerFormatDelegate as? Minute)
   89|      1|        //Check if the format is hour
   90|      1|        sut.setTimerValue(3600)
   91|      1|        XCTAssertNotNil(sut.timeTracker.timerFormatDelegate as? Hour)
   92|      1|    }
   93|       |    
   94|      1|    func testIsValid_WhenCheckingTimer_ReturnBoolean(){
   95|      1|        sut.stopTimer()
   96|      1|        XCTAssertFalse(sut.isValid)
   97|      1|        sut.timeTracker.timer = Timer.scheduledTimer(withTimeInterval: 100, repeats: false, block: { (_) in
   98|      0|            
   99|      0|        })
  100|      1|        XCTAssertTrue(sut.isValid)
  101|      1|    }
  102|       |    
  103|      1|    func testStartTimer_WhenCalled_UpdateView(){
  104|      1|        //Set expectation to when thread is over
  105|      1|        let expectation = self.expectation(description: "Timer")
  106|      1|        //Set timer values for test
  107|      1|        sut.isRunning = false
  108|      1|        sut.setTimerValue(2)
  109|      1|        sut.timeTracker.defaultTime = 1
  110|      1|        sut.startTimer()
  111|      1|        XCTAssertEqual(self.sut.timeTracker.configTime, self.sut.timeTracker.defaultTime)
  112|      1|        //Test if text is running properly (It starts at "02" and after 1 second it turns to "01")
  113|      1|        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
  114|      1|            XCTAssertEqual(self.sut.timerLabel.text, "01")
  115|      1|        }
  116|      1|        //Test when timer has ended
  117|      1|        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
  118|      1|            XCTAssertFalse(self.sut.isRunning)
  119|      1|            //Test if timer is already running
  120|      1|            self.sut.stopTimer()
  121|      1|            self.sut.isRunning = true
  122|      1|            self.sut.layer.speed = 0.0
  123|      1|            self.sut.layer.timeOffset = 1.0
  124|      1|            self.sut.startTimer()
  125|      1|            XCTAssertEqual(self.sut.layer.speed, 1.0)
  126|      1|            XCTAssertEqual(self.sut.layer.timeOffset, 0.0)
  127|      1|            //End tests
  128|      1|            expectation.fulfill()
  129|      1|        }
  130|      1|        //Wait for tests to finish
  131|      1|        waitForExpectations(timeout: 5, handler: nil)
  132|      1|
  133|      1|    }
  134|       |    
  135|      1|    func testStopTimer_WhenTimerEnds_ResetTimerAndAnimation(){
  136|      1|        sut.timeTracker.timer = Timer.scheduledTimer(withTimeInterval: 10, repeats: false, block: { (_) in
  137|      0|            
  138|      0|        })
  139|      1|        sut.timeTracker.configTime = 0
  140|      1|        sut.timeTracker.defaultTime = 10
  141|      1|        sut.animateRing(FromStroke: 0, FromAngle: 0, To: 1)
  142|      1|        sut.stopTimer()
  143|      1|        XCTAssertEqual(sut.timeTracker.configTime, sut.timeTracker.defaultTime)
  144|      1|        XCTAssertFalse(sut.isValid)
  145|      1|        XCTAssertNil(sut.ringLayer.animation(forKey: "animateRing"))
  146|      1|        XCTAssertNil(sut.pinLayer.animation(forKey: "animatePin"))
  147|      1|    }
  148|       |    
  149|      1|    func testPauseTimer_WhenCalled_PauseTimerAndAnimation(){
  150|      1|        sut.setTimerValue(60)
  151|      1|        sut.layer.speed = 1
  152|      1|        sut.timeTracker.countDown = 5
  153|      1|        sut.startTimer()
  154|      1|        sut.pauseTimer()
  155|      1|        XCTAssertEqual(sut.timeTracker.configTime, sut.timeTracker.countDown)
  156|      1|        XCTAssertFalse(sut.isValid)
  157|      1|        XCTAssertEqual(sut.layer.speed, 0.0)
  158|      1|    }
  159|       |    
  160|      1|    func testRemoveAnimation_WhenTimerEnds_RemoveAllAnimatinos(){
  161|      1|        sut.animateRing(FromStroke: 0, FromAngle: 0, To: 1)
  162|      1|        sut.removeAnimation()
  163|      1|        XCTAssertNil(sut.ringLayer.animation(forKey: "animateRing"))
  164|      1|        XCTAssertNil(sut.pinLayer.animation(forKey: "animatePin"))
  165|      1|    }
  166|       |    
  167|      1|    func testEnterBackground_WhenInBackground_GetCurrentTime(){
  168|      1|        sut.wentToBackground = false
  169|      1|        sut.totalTime = 0
  170|      1|        sut.enterBackground()
  171|      1|        XCTAssertEqual(Int(sut.date.distance(to: Date())), 0)
  172|      1|        XCTAssert(sut.wentToBackground)
  173|      1|        XCTAssertEqual(sut.totalTime, CGFloat(sut.timeTracker.defaultTime))
  174|      1|    }
  175|       |    
  176|      1|    func testEnterForeground_WhenInForeground_GetDistanceBetweenDates(){
  177|      1|        sut.wentToBackground = true
  178|      1|        sut.isRunning = true
  179|      1|        sut.timeTracker.timer = Timer.scheduledTimer(withTimeInterval: 10, repeats: true, block: { (_) in
  180|      0|            
  181|      0|        })
  182|      1|        sut.date = Date()
  183|      1|        sut.timeTracker.countDown = 0
  184|      1|        sut.enterForeground()
  185|      1|        XCTAssertFalse(sut.wentToBackground)
  186|      1|        XCTAssert(sut.isRunning)
  187|      1|        XCTAssertEqual(sut.timeTracker.countDown, 0)
  188|      1|        sut.isRunning = true
  189|      1|        sut.wentToBackground = true
  190|      1|        sut.layer.speed = 0.0
  191|      1|        sut.enterForeground()
  192|      1|        XCTAssertEqual(sut.layer.timeOffset, 0.0)
  193|      1|        sut.stopTimer()
  194|      1|    }
  195|       |    
  196|      1|    func testCalculateStartingPoint_WhenValuesProvided_SetWhereAnimationShouldStart(){
  197|      1|        sut.totalTime = 10
  198|      1|        XCTAssertEqual(sut.calculateStartingPoint(By: 2, To: 1), 0.8)
  199|      1|        XCTAssertEqual(sut.calculateStartingPoint(By: 0, To: 1), 1)
  200|      1|    }
  201|       |    
  202|       |    //MARK: - Designable
  203|      1|    func testDesignableExtension_WhenValuesGot_ReturnDefaultValue(){
  204|      1|        //fontSize
  205|      1|        XCTAssertEqual(sut.fontSize, 32.0)
  206|      1|        //enableTimer
  207|      1|        XCTAssertEqual(sut.enableTimer, true)
  208|      1|        //fontColor
  209|      1|        sut.fontColor = UIColor.black
  210|      1|        XCTAssertEqual(sut.fontColor, sut.timerLabel.textColor)
  211|      1|        XCTAssertEqual(sut.timerLabel.textColor, UIColor.black)
  212|      1|        //canAdaptTimer
  213|      1|        XCTAssertEqual(sut.canAdaptTimer, true)
  214|      1|        sut.canAdaptTimer = false
  215|      1|        XCTAssertEqual(sut.canAdaptTimerFormat, false)
  216|      1|        XCTAssertNotNil(sut.timeTracker.timerFormatDelegate as? Hour)
  217|      1|        //backgrounddCircleRadius
  218|      1|        XCTAssertEqual(sut.backgroundCircleRadius, 0.0)
  219|      1|        //backgroundCircleColor
  220|      1|        sut.backgroundCircleColor = .black
  221|      1|        XCTAssertEqual(sut.backgroundCircleColor, UIColor.init(cgColor: sut.circleBackgroundLayer.fillColor!))
  222|      1|        XCTAssertEqual(sut.circleBackgroundLayer.fillColor, UIColor.black.cgColor)
  223|      1|        //stroke
  224|      1|        XCTAssertEqual(sut.stroke, 0.0)
  225|      1|        //strokeWidth
  226|      1|        XCTAssertEqual(sut.strokeWidth, 0.0)
  227|      1|        //completedStrokeWidth
  228|      1|        XCTAssertEqual(sut.completedStrokeWidth, 0.0)
  229|      1|        //strokeColor
  230|      1|        sut.circleLayer.fillColor = UIColor.black.cgColor
  231|      1|        XCTAssertEqual(sut.strokeColor, UIColor.black)
  232|      1|        //completedStrokeColor
  233|      1|        sut.ringLayer.fillColor = UIColor.black.cgColor
  234|      1|        XCTAssertEqual(sut.completedStrokeColor, UIColor.black)
  235|      1|        //pinColor
  236|      1|        sut.pinLayer.fillColor = UIColor.black.cgColor
  237|      1|        XCTAssertEqual(sut.pinColor, UIColor.black)
  238|      1|        //pinRadius
  239|      1|        XCTAssertEqual(sut.pinRadius, 7)
  240|      1|    }
  241|       |}

/Users/fabioms/Desktop/PODTEST/PODTESTTests/PODTESTTests.swift:
    1|       |//
    2|       |//  PODTESTTests.swift
    3|       |//  PODTESTTests
    4|       |//
    5|       |//  Created by Fábio Maciel de Sousa on 07/06/20.
    6|       |//  Copyright © 2020 Fábio Maciel de Sousa. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import PODTEST
   11|       |
   12|       |class PODTESTTests: XCTestCase {
   13|       |
   14|      2|    override func setUpWithError() throws {
   15|      2|        // Put setup code here. This method is called before the invocation of each test method in the class.
   16|      2|    }
   17|       |
   18|      2|    override func tearDownWithError() throws {
   19|      2|        // Put teardown code here. This method is called after the invocation of each test method in the class.
   20|      2|    }
   21|       |
   22|      1|    func testExample() throws {
   23|      1|        // This is an example of a functional test case.
   24|      1|        // Use XCTAssert and related functions to verify your tests produce the correct results.
   25|      1|    }
   26|       |
   27|      1|    func testPerformanceExample() throws {
   28|      1|        // This is an example of a performance test case.
   29|     10|        self.measure {
   30|     10|            // Put the code you want to measure the time of here.
   31|     10|        }
   32|      1|    }
   33|       |
   34|       |}

/Users/fabioms/Desktop/PODTEST/PODTESTTests/TimeFormattableTests.swift:
    1|       |//
    2|       |//  TimeFormattableTests.swift
    3|       |//  PODTESTTests
    4|       |//
    5|       |//  Created by Fábio Maciel de Sousa on 17/07/20.
    6|       |//  Copyright © 2020 Fábio Maciel de Sousa. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import PODTEST
   11|       |
   12|       |class TimeFormattableTests: XCTestCase {
   13|       |    
   14|       |    var sutHour: Hour!
   15|       |    var sutMinute: Minute!
   16|       |    var sutSecond: Second!
   17|       |
   18|       |
   19|      4|    override func setUp() {
   20|      4|        // Put setup code here. This method is called before the invocation of each test method in the class.
   21|      4|        sutHour = Hour()
   22|      4|        sutMinute = Minute()
   23|      4|        sutSecond = Second()
   24|      4|    }
   25|       |
   26|      4|    override func tearDown() {
   27|      4|        // Put teardown code here. This method is called after the invocation of each test method in the class.
   28|      4|        sutHour = nil
   29|      4|        sutMinute = nil
   30|      4|        sutSecond = nil
   31|      4|    }
   32|       |
   33|      1|    func testExample() throws {
   34|      1|        // This is an example of a functional test case.
   35|      1|        // Use XCTAssert and related functions to verify your tests produce the correct results.
   36|      1|    }
   37|       |
   38|      1|    func testPerformanceExample() throws {
   39|      1|        // This is an example of a performance test case.
   40|     10|        self.measure {
   41|     10|            // Put the code you want to measure the time of here.
   42|     10|        }
   43|      1|        
   44|      1|    }
   45|       |    
   46|      1|    func testSecondsToString_WhenSecondsProvided_ReturnsFormattedString(){
   47|      1|        //Hour
   48|      1|        XCTAssertEqual(sutHour.secondsToString(with: 3600), "01:00:00")
   49|      1|        XCTAssertEqual(sutHour.secondsToString(with: -1), "")
   50|      1|        //Minute
   51|      1|        XCTAssertEqual(sutMinute.secondsToString(with: 60), "01:00")
   52|      1|        XCTAssertEqual(sutMinute.secondsToString(with: -1), "")
   53|      1|        //Second
   54|      1|        XCTAssertEqual(sutSecond.secondsToString(with: 1), "01")
   55|      1|        XCTAssertEqual(sutSecond.secondsToString(with: -1), "")
   56|      1|    }
   57|       |    
   58|      1|    func testStringToSeconds_WhenTextProvided_ReturnsSeconds(){
   59|      1|        //Hour
   60|      1|        XCTAssertEqual(sutHour.stringToSeconds(from: "-01:00:00"), 0)
   61|      1|        XCTAssertEqual(sutHour.stringToSeconds(from: "000001"), 0)
   62|      1|        XCTAssertEqual(sutHour.stringToSeconds(from: "01:00"), 0)
   63|      1|        XCTAssertEqual(sutHour.stringToSeconds(from: "01:00:00"), 3600)
   64|      1|        //Minute
   65|      1|        XCTAssertEqual(sutMinute.stringToSeconds(from: "-01:00"), 0)
   66|      1|        XCTAssertEqual(sutMinute.stringToSeconds(from: "0001"), 0)
   67|      1|        XCTAssertEqual(sutMinute.stringToSeconds(from: "01"), 0)
   68|      1|        XCTAssertEqual(sutMinute.stringToSeconds(from: "01:00"), 60)
   69|      1|        //Second
   70|      1|        XCTAssertEqual(sutSecond.stringToSeconds(from: "-01"), 0)
   71|      1|        XCTAssertEqual(sutSecond.stringToSeconds(from: "01:00:00"), 0)
   72|      1|        XCTAssertEqual(sutSecond.stringToSeconds(from: "01"), 1)
   73|      1|    }
   74|       |
   75|       |}

/Users/fabioms/Desktop/PODTEST/PODTESTTests/TimeTrackerTests.swift:
    1|       |//
    2|       |//  TimeTrackerTests.swift
    3|       |//  PODTESTTests
    4|       |//
    5|       |//  Created by Fábio Maciel de Sousa on 18/07/20.
    6|       |//  Copyright © 2020 Fábio Maciel de Sousa. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import PODTEST
   11|       |
   12|       |class TimeTrackerTests: XCTestCase {
   13|       |    
   14|       |    var sut: TimeTracker!
   15|       |
   16|      4|    override func setUpWithError() throws {
   17|      4|        // Put setup code here. This method is called before the invocation of each test method in the class.
   18|      4|        sut = TimeTracker()
   19|      4|    }
   20|       |
   21|      4|    override func tearDownWithError() throws {
   22|      4|        // Put teardown code here. This method is called after the invocation of each test method in the class.
   23|      4|        sut = nil
   24|      4|    }
   25|       |
   26|      1|    func testExample() throws {
   27|      1|        // This is an example of a functional test case.
   28|      1|        // Use XCTAssert and related functions to verify your tests produce the correct results.
   29|      1|    }
   30|       |
   31|      1|    func testPerformanceExample() throws {
   32|      1|        // This is an example of a performance test case.
   33|     10|        self.measure {
   34|     10|            // Put the code you want to measure the time of here.
   35|     10|        }
   36|      1|    }
   37|       |
   38|      1|    func testStartTimer_WhenCalled_StartCountDownAndUpdateView(){
   39|      1|        let expectation = self.expectation(description: "Timer")
   40|      1|        
   41|      1|        sut.defaultTime = 2
   42|      1|        sut.configTime = 2
   43|      1|        sut.countDown = 5
   44|      1|        sut.timerFormatDelegate = Hour()
   45|      1|        sut.stopTimer {}
   46|      1|        XCTAssertFalse(sut.timer.isValid)
   47|      2|        sut.startTimer { (_, _) in}
   48|      1|        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
   49|      1|            XCTAssertFalse(self.sut.timer.isValid)
   50|      1|            expectation.fulfill()
   51|      1|        }
   52|      1|        XCTAssert(sut.timer.isValid)
   53|      1|        
   54|      1|        waitForExpectations(timeout: 5, handler: nil)
   55|      1|
   56|      1|    }
   57|       |    
   58|      1|    func testCountDown_WhenValeuDecreasedToZero_EndTimer(){
   59|      1|        sut.countDown = 10
   60|      1|        sut.hasEnded = false
   61|      1|        sut.countDown = 0
   62|      1|        XCTAssert(sut.hasEnded)
   63|      1|    }
   64|       |}

